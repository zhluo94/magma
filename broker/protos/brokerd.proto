syntax = 'proto3';

package magma.broker;

import "broker/protos/common.proto";
//option go_package = "magma/broker/cloud/go/protos";

service Brokerd {
    // -- auth protocol
    // modified Authentication-Information (Code 318, S6a)
    rpc BrokerAuthenticationInformation (BrokerAuthenticationInformationRequest) returns (BrokerAuthenticationInformationAnswer) {}

    // ..update location etc.
    rpc BrokerUpdateLocation (BrokerUpdateLocationRequest) returns (BrokerUpdateLocationAnswer) {}
    rpc BrokerPurgeUE (BrokerPurgeUERequest) returns (BrokerPurgeUEAnswer) {}

    // -- billing protocol
    rpc ReportUsage(Usage) returns (Void) {
    }
    // -- handover protocol
}

// message BrokerAuthenticationInformationRequest {
//     AuthenticationInformationRequest content = 1;
//     string signature = 2;
// }

// message BrokerAuthenticationInformationAnswer {
//     AuthenticationInformationAnswer content = 1;
//     string signature = 2;
// }

// Authentication Information Request (Section 7.2.5, S6a)
message BrokerAuthenticationInformationRequest {
    // Subscriber identifier
    string user_name = 1;
    // Visted site identifier
    bytes visited_plmn = 2;
    // Number of vectors to request in response
    uint32 num_requested_eutran_vectors = 3;
    // Indicates to the HSS the values are requested for immediate attach
    bool immediate_response_preferred = 4;
    // Concatenation of RAND and AUTS in the case of a resync attach case
    bytes resync_info = 5;
    // added for three-way Authentication (TODO: fix the above fileds)
    bytes ue_br_token = 6;
    bytes ue_br_token_ue_sig = 7;
    bytes ue_br_token_ut_sig = 8;
}


// Authentication Information Answer (Section 7.2.6, S6a)
message BrokerAuthenticationInformationAnswer {
    // EPC error code on failure
    ErrorCode error_code = 1;
    // Authentication vectors matching the requested number
    repeated BrokerAuthVector br_auth_vectors = 2;
    message BrokerAuthVector {
        bytes br_ut_token = 1;
        bytes br_ut_token_br_sig = 2;
        bytes br_ue_token = 3;
        bytes br_ue_token_br_sig = 4;
    }
}

// Update Location Request (Section 7.2.3)
message BrokerUpdateLocationRequest {
    // Subscriber identifier
    string user_name = 1;
    // Visited site identifier
    bytes visited_plmn = 2;

    // Selective unrolling of ULR-Flags 29.272 Table 7.3.7/1
    // Skip subscription data in response
    bool skip_subscriber_data = 3; // bit 2
    // Send Cancel Location to other EPCs serving the UE
    bool initial_attach = 4; // bit 5
}

// Update Location Answer (Section 7.2.4)
message BrokerUpdateLocationAnswer {
    // EPC error code on failure
    ErrorCode error_code = 1;
    // Identifier of the default APN
    uint32 default_context_id = 2;
    // Subscriber authorized aggregate bitrate
    AggregatedMaximumBitrate total_ambr = 3;
    // Indicates to wipe other stored APNs
    bool all_apns_included = 4;
    // APN configurations
    repeated APNConfiguration apn = 5;

    bytes msisdn = 7;

    // Network Access Mode AVP (Section 7.3.21)
    enum NetworkAccessMode {
        PACKET_AND_CIRCUIT = 0;
        RESERVED = 1;
        ONLY_PACKET = 2;
    }

    NetworkAccessMode network_access_mode = 8;

    message APNConfiguration {
        // APN identifier
        uint32 context_id = 1;
        // Contains either the APN Name or wildcard "*"
        string service_selection = 2;
        // APN QoS profile
        QoSProfile qos_profile = 3;
        // APN authorized bitrate
        AggregatedMaximumBitrate ambr = 4;

        enum PDNType {
            IPV4 = 0;
            IPV6 = 1;
            IPV4V6 = 2;
            IPV4_OR_IPV6 = 3;
        }

        PDNType pdn = 5;

        // For details about values see 29.212
        message QoSProfile {
            int32 class_id = 1;
            uint32 priority_level = 2;
            bool preemption_capability = 3;
            bool preemption_vulnerability = 4;
        }
    }

    message AggregatedMaximumBitrate {
        // Maximum uplink bitrate
        uint32 max_bandwidth_ul = 1;
        // Maximum downlink bitrate
        uint32 max_bandwidth_dl = 2;
    }
}

// Purge UE Request (Section 7.2.14)
message BrokerPurgeUERequest {
    // Subscriber identifier
    string user_name = 1;
}

// Purge UE Answer (Section 7.2.15)
message BrokerPurgeUEAnswer {
    // EPC error code on failure
    ErrorCode error_code = 1;
}

// ErrorCode reflects Experimental-Result values which are 3GPP failures
// to be processed by EPC. Diameter Base Protocol errors are reflected in gRPC status code
enum ErrorCode {
    UNDEFINED                = 0;
    // Default success code
    MULTI_ROUND_AUTH         = 1001;
    SUCCESS                  = 2001;
    LIMITED_SUCCESS          = 2002;
    COMMAND_UNSUPORTED       = 3001;
    UNABLE_TO_DELIVER        = 3002;
    REALM_NOT_SERVED         = 3003;
    TOO_BUSY                 = 3004;
    LOOP_DETECTED            = 3005;
    REDIRECT_INDICATION      = 3006;
    APPLICATION_UNSUPPORTED  = 3007;
    INVALIDH_DR_BITS         = 3008;
    INVALID_AVP_BITS         = 3009;
    UNKNOWN_PEER             = 3010;
    AUTHENTICATION_REJECTED  = 4001;
    OUT_OF_SPACE             = 4002;
    ELECTION_LOST            = 4003;
    AUTHORIZATION_REJECTED   = 5003;
    // Permanent Failures 7.4.3
    USER_UNKNOWN             = 5001;
    UNKNOWN_SESSION_ID       = 5002;
    UNKNOWN_EPS_SUBSCRIPTION = 5420;
    RAT_NOT_ALLOWED          = 5421;
    ROAMING_NOT_ALLOWED      = 5004;
    EQUIPMENT_UNKNOWN        = 5422;
    UNKOWN_SERVING_NODE      = 5423;
    // Transient Failures 7.4.4
    AUTHENTICATION_DATA_UNAVAILABLE = 4181;
}

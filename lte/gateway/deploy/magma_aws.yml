---
################################################################################
# Copyright (c) Facebook, Inc. and its affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.
################################################################################
- hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: ~/.pyenv/shims/python # the default is /usr/bin/python
    aws_region: "{{ lookup('env','AWS_REGION') }}"
    aws_magma_instance_type: "{{ lookup('env','MAGMA_INSTANCE_TYPE') }}"
    aws_magma_ami: "{{ lookup('env','MAGMA_AMI') }}"
    aws_subnet_id: "{{ lookup('env','SUBNET_ID') }}"
    aws_security_group: "{{ lookup('env','SECURITY_GROUP') }}"
    private_ip0: "{{ lookup('env','MAGMA_NET0') }}"
    private_ip1: "{{ lookup('env','MAGMA_NET1') }}"
    private_ip2: "{{ lookup('env','MAGMA_NET2') }}"

  tasks:
  - name: Get EC2 instance informatio first
    ec2_instance_info:
      region: "{{ aws_region }}"
      filters:
        image-id: "{{ aws_magma_ami }}"
        instance-type: "{{ aws_magma_instance_type }}"
        subnet-id: "{{ aws_subnet_id }}"
        private-ip-address: "{{ private_ip0 }}"
        instance-state-name: running
    register: ec2

  - name: One and only one instance 
    assert:
      that:
        "{{ ec2.instances|length }} == 1"

  - name: Configure first network interface
    ec2_eni:
      instance_id: "{{ ec2.instances.0.instance_id }}"
      device_index: 1
      private_ip_address: "{{ private_ip1 }}"
      subnet_id: "{{ aws_subnet_id }}"
      security_groups: ["{{ aws_security_group }}"]
      region: "{{ aws_region }}"
      attached: yes
      state: present
    # loop:
    #   "{{ ec2.instances }}"

  - name: Configure the second network interface
    ec2_eni:
      instance_id: "{{ ec2.instances.0.instance_id }}"
      device_index: 2
      private_ip_address: "{{ private_ip2 }}"
      subnet_id: "{{ aws_subnet_id }}"
      security_groups: ["{{ aws_security_group }}"]
      region: "{{ aws_region }}"
      attached: yes
      state: present
    # loop:
    #   "{{ ec2.instances }}"

  - name: Add the ec2 instance as a host 
    add_host:
      hostname: "{{ ec2.instances.0.public_ip_address }}"
      group: ec2_group

- name: Set up Magma aws build environment on an AWS instance
  hosts: ec2_group #ami_042b622d9bd9f46be
  become: yes

  vars:
    ansible_user: admin
    ansible_ssh_private_key_file: "{{ lookup('env','KEY_FILE_PATH') }}"
    magma_root: /home/{{ ansible_user }}/magma
    preburn: false
    full_provision: true

  roles:
    # This role is commented out for now because as it turns out, it's very
    # difficult to install Debian on a box without also installing packages
    # from an upstream mirror. Even if we pin a snapshot to before the 4.9.0-11
    # cutover, a freshly installed box will still end up with some packages
    # from after the cutover (e.g. libsystemd0). Pinning to the snapshot
    # repository after these packages are installed will result in a situation
    # where it's impossible to proceed with provisioning.
    #- role: stretch_snapshot
    - role: gateway_dev
      vars:
        distribution: "stretch"
        repo: "dev"
        config_dir: "lte/gateway/configs"
    - role: dev_common
      vars:
        c_build: /home/{{ ansible_user }}/build/c/
        oai_build: "{{ c_build }}/oai"
    - role: magma_aws
      vars:
        c_build: /home/{{ ansible_user }}/build/c/
        oai_build: "{{ c_build }}/oai"
        magma_repo: /home/{{ ansible_user }}/magma-packages
    - role: fluent_bit

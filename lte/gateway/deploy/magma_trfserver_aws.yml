---
# Copyright (c) 2016-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree. An additional grant
# of patent rights can be found in the PATENTS file in the same directory.


# Ansible playbook for setting up a production machine (i.e., a box running
# Debian 8).
- hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: ~/.pyenv/shims/python # the default is /usr/bin/python
    aws_region: "{{ lookup('env','AWS_REGION') }}"
    aws_magma_instance_type: "{{ lookup('env','MAGMA_TRF_INSTANCE_TYPE') }}"
    aws_magma_ami: "{{ lookup('env','MAGMA_TRF_AMI') }}"
    aws_subnet_id: "{{ lookup('env','SUBNET_ID') }}"
    aws_security_group: "{{ lookup('env','SECURITY_GROUP') }}"
    private_ip0: "{{ lookup('env','MAGMA_TRF_NET0') }}"
    private_ip1: "{{ lookup('env','MAGMA_TRF_NET1') }}"
    private_ip2: "{{ lookup('env','MAGMA_TRF_NET2') }}"

  tasks:
  - name: Get EC2 instance informatio first
    ec2_instance_info:
      region: "{{ aws_region }}"
      filters:
        image-id: "{{ aws_magma_ami }}"
        instance-type: "{{ aws_magma_instance_type }}"
        subnet-id: "{{ aws_subnet_id }}"
        private-ip-address: "{{ private_ip0 }}"
        instance-state-name: running
    register: ec2

  - name: One and only one instance 
    assert:
      that:
        "{{ ec2.instances|length }} == 1"

  - name: Configure first network interface
    ec2_eni:
      instance_id: "{{ ec2.instances.0.instance_id }}"
      device_index: 1
      private_ip_address: "{{ private_ip1 }}"
      subnet_id: "{{ aws_subnet_id }}"
      security_groups: ["{{ aws_security_group }}"]
      region: "{{ aws_region }}"
      attached: yes
      state: present
    # loop:
    #   "{{ ec2.instances }}"

  - name: Configure the second network interface
    ec2_eni:
      instance_id: "{{ ec2.instances.0.instance_id }}"
      device_index: 2
      private_ip_address: "{{ private_ip2 }}"
      subnet_id: "{{ aws_subnet_id }}"
      security_groups: ["{{ aws_security_group }}"]
      region: "{{ aws_region }}"
      attached: yes
      state: present
    # loop:
    #   "{{ ec2.instances }}"

  - name: Add the ec2 instance as a host 
    add_host:
      hostname: "{{ ec2.instances.0.public_ip_address }}"
      group: ec2_group

- name: Set up a iperf3 trfserver machine
  hosts: ec2_group
  become: true

  vars:
    magma_root: /home/{{ ansible_user }}/magma
    preburn: false
    full_provision: true

  roles:
    - role: stretch_snapshot
    - role: trfserver_aws
